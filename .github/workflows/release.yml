name: Rust CI & Release

# ------------- 触发条件 -------------
on:
  push:
    branches: [main] # push 到 main 触发 CI 和 Release PR
    tags:
      - "v*" # push 标签时触发构建和发布
  pull_request:
    branches: [main] # PR 提交到 main 分支时触发 CI

permissions:
  contents: write # 允许操作代码库内容，用于 release-please 和 changelog
  pull-requests: write # 允许创建和更新 Pull Request
  issues: write # 用于发布时添加 issue 相关内容（如果需要）
  actions: write # 允许创建 release

jobs:
  # ------------------ Release Please 自动创建 Release PR ------------------
  release-please:
    name: Generate Release PR
    runs-on: ubuntu-latest
    # 只在 push 到 main 时运行（PR 触发时不会运行）
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Release Please Action
        uses: googleapis/release-please-action@v4
        with:
          release-type: rust # Rust 项目
          package-name: myapp # 替换成你的 crate 名称，须与 Cargo.toml 中一致
          token: ${{ secrets.GITHUB_TOKEN }}
          changelog-types: |
            [
              {"type": "feat", "section": "✨ Features"},
              {"type": "fix", "section": "🐛 Bug Fixes"},
              {"type": "chore", "section": "🔧 Maintenance"},
              {"type": "refactor", "section": "🧼 Refactors"},
              {"type": "docs", "section": "📝 Documentation"},
              {"type": "test", "section": "🧪 Tests"}
            ]

  # ------------------ 多平台构建、测试 ------------------
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo registry and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Check formatting (cargo fmt)
        run: cargo fmt --check

      - name: Run Clippy (static analysis)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build debug version
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      # 仅在 tag 推送时执行 release 构建，准备发布的二进制文件
      - name: Build release & rename binary
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cargo build --release
          mkdir -p dist

          PLATFORM=""
          case "${{ runner.os }}" in
            "Windows") PLATFORM="windows" ;;
            "macOS")   PLATFORM="macos" ;;
            "Linux")   PLATFORM="linux" ;;
          esac

          OUTFILE="myapp-${PLATFORM}"
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv target/release/myapp.exe "dist/${OUTFILE}.exe"
          else
            mv target/release/myapp "dist/${OUTFILE}"
          fi

      - name: Upload release artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.repository.split('/')[1] }}-${{ matrix.os }}
          path: dist/*
          if-no-files-found: error

  # ------------------ 发布 GitHub Release ------------------
  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release and upload binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
